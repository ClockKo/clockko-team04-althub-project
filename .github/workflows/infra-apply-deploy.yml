name: Apply Infra + Deploy (Frontend & Backend)

on:
  workflow_dispatch:
    inputs:
      disable_lock:
        description: "Temporarily disable Terraform state locking (-lock=false) for bootstrap"
        type: boolean
        default: false
  push:
    branches: ["main"]
    paths:
      - "backend/**"
      - "iac/**"

permissions:
  id-token: write
  contents: read

concurrency:
  group: "infra-apply"
  cancel-in-progress: true

jobs:
  apply-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tag
        id: vars
        run: |
          TAG="backend-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}"
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Resolve ECR repository
        id: ecr_repo
        run: |
          REPO="${{ vars.ECR_REPOSITORY }}"
          if [ -z "$REPO" ] || [ "$REPO" = "null" ]; then REPO="clockko-backend"; fi
          echo "repo=$REPO" >> $GITHUB_OUTPUT

      - name: Build & Push Backend Image
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.ecr_repo.outputs.repo }}
          IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Scan image with Trivy (HIGH,CRITICAL)
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: ${{ steps.ecr.outputs.registry }}/${{ steps.ecr_repo.outputs.repo }}:${{ steps.vars.outputs.image_tag }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          vuln-type: 'library'
          ignore-unfixed: true
          scanners: 'vuln'
          exit-code: '1'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        working-directory: iac/stacks/backend
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_DYNAMO_TABLE }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY_BACKEND }}" \
            -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Export Terraform variables (TF_VAR_*)
        run: |
          set -euo pipefail
          USE_EXISTING_VPC="${{ vars.USE_EXISTING_VPC }}"; [ -z "$USE_EXISTING_VPC" ] || [ "$USE_EXISTING_VPC" = "null" ] && USE_EXISTING_VPC="false"
          CREATE_RDS="${{ vars.CREATE_RDS }}"; [ -z "$CREATE_RDS" ] || [ "$CREATE_RDS" = "null" ] && CREATE_RDS="false"
          EXISTING_VPC_ID="${{ vars.EXISTING_VPC_ID }}"; [ "$EXISTING_VPC_ID" = "null" ] && EXISTING_VPC_ID=""
          EXISTING_PUBLIC_SUBNET_IDS="${{ vars.EXISTING_PUBLIC_SUBNET_IDS }}"; [ "$EXISTING_PUBLIC_SUBNET_IDS" = "null" ] && EXISTING_PUBLIC_SUBNET_IDS=""
          echo "TF_VAR_use_existing_vpc=$USE_EXISTING_VPC" >> $GITHUB_ENV
          echo "TF_VAR_create_rds=$CREATE_RDS" >> $GITHUB_ENV
          echo "TF_VAR_existing_vpc_id=$EXISTING_VPC_ID" >> $GITHUB_ENV
          echo "TF_VAR_existing_public_subnet_ids=$EXISTING_PUBLIC_SUBNET_IDS" >> $GITHUB_ENV

      - name: Terraform Apply (backend)
        working-directory: iac/stacks/backend
        env:
          TF_VAR_image_tag: ${{ steps.vars.outputs.image_tag }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          VITE_GOOGLE_CLIENT_ID: ${{ vars.VITE_GOOGLE_CLIENT_ID }}
          FRONTEND_PROJECT_NAME: ${{ vars.FRONTEND_PROJECT_NAME }}
        run: |
          PROJECT_NAME="$FRONTEND_PROJECT_NAME"; [ -z "$PROJECT_NAME" ] || [ "$PROJECT_NAME" = "null" ] && PROJECT_NAME="clockko"
          LOCK_FLAG=""
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.disable_lock }}" = "true" ]; then LOCK_FLAG="-lock=false"; fi
          terraform apply -auto-approve \
            ${LOCK_FLAG} \
            -var="aws_region=$AWS_REGION" \
            -var="project_name=$PROJECT_NAME" \
            -var="github_org=${{ github.repository_owner }}" \
            -var="github_repo=${{ github.event.repository.name }}" \
            -var="google_client_id=$VITE_GOOGLE_CLIENT_ID" \
            -var="google_oauth_secret_name=clockko-google-oauth"

      - name: Run DB Migrations (Alembic upgrade head)
        working-directory: iac/scripts
        run: |
          bash ./run-db-migration.sh

      - name: Backend Service Health Check
        run: |
          set -euo pipefail
          CLUSTER=$(terraform -chdir=iac/stacks/backend output -raw ecs_cluster_name)
          SERVICE=$(terraform -chdir=iac/stacks/backend output -raw ecs_service_name)
          RUNNING=$(aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" --query 'services[0].runningCount' --output text)
          echo "ECS runningCount=$RUNNING"
          if [ "$RUNNING" -lt 1 ]; then
            echo "No running ECS tasks after deploy" >&2
            exit 1
          fi

      - name: Update API Gateway integration (helper)
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          set -euo pipefail
          bash iac/scripts/backend-update-apigw-integration.sh

      - name: API Gateway Smoke Test (HTTPS)
        run: |
          set -euo pipefail
          API_URL=$(terraform -chdir=iac/stacks/backend output -raw api_gateway_url)
          BASE="$API_URL/api"
          echo "Testing $BASE/health"
          STATUS=""
          for i in 1 2 3; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE/health" || true)
            if [ "$STATUS" = "200" ]; then break; fi
            echo "Health check attempt $i failed with $STATUS; retrying in 5s..."
            sleep 5
          done
          if [ "$STATUS" != "200" ]; then
            echo "Health endpoint unhealthy (status $STATUS)" >&2
            exit 1
          fi
          echo "Testing $BASE/health/google"
          STATUS2=$(curl -s -o /dev/null -w "%{http_code}" "$BASE/health/google" || true)
          if [ "$STATUS2" != "200" ]; then
            echo "Google health endpoint unhealthy (status $STATUS2)" >&2
            exit 1
          fi
          echo "API smoke tests passed."

  # The frontend is deployed via GitHub Pages workflow on frontend changes.
  # No frontend rebuild is required for backend-only changes when using API Gateway, as the API URL is stable.
