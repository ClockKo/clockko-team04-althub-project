name: Apply Infra + Deploy (Frontend & Backend)

on:
  push:
    branches: ["main"]
    paths:
      - "frontend/**"
      - "backend/**"
      - "iac/**"

permissions:
  id-token: write
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      frontend_infra: ${{ steps.filter.outputs.frontend_infra }}
      backend: ${{ steps.filter.outputs.backend }}
      backend_infra: ${{ steps.filter.outputs.backend_infra }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            frontend_infra:
              - 'iac/stacks/frontend/**'
              - 'iac/modules/frontend_static_site/**'
            backend:
              - 'backend/**'
            backend_infra:
              - 'iac/stacks/backend/**'
              - 'iac/modules/backend_service/**'

  apply-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.frontend_infra == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        working-directory: iac/stacks/frontend
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_DYNAMO_TABLE }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}" \
            -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Terraform Apply (frontend)
        working-directory: iac/stacks/frontend
        run: |
          terraform apply -auto-approve \
            -var="project_name=${{ vars.FRONTEND_PROJECT_NAME }}" \
            -var="domain_name=${{ vars.FRONTEND_DOMAIN }}" \
            -var="route53_zone_id=${{ vars.ROUTE53_ZONE_ID }}" \
            -var="create_hosted_zone=${{ vars.CREATE_HOSTED_ZONE }}"

      - name: Build & Deploy Frontend
        working-directory: iac/scripts
        env:
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
        run: |
          bash ./frontend-deploy.sh

  apply-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.backend_infra == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tag
        id: vars
        run: |
          echo "IMAGE_TAG=backend-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build & Push Backend Image
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          cd backend
          : "${ECR_REPOSITORY:=clockko-backend}" # default if unset
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        working-directory: iac/stacks/backend
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_DYNAMO_TABLE }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY_BACKEND }}" \
            -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Terraform Apply (backend)
        working-directory: iac/stacks/backend
        env:
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}
        run: |
          PROJECT_NAME="${{ vars.BACKEND_PROJECT_NAME }}"; [ -z "$PROJECT_NAME" ] && PROJECT_NAME="${{ vars.FRONTEND_PROJECT_NAME }}"
          terraform apply -auto-approve \
            -var="aws_region=${{ vars.AWS_REGION }}" \
            -var="project_name=$PROJECT_NAME" \
            -var="github_org=${{ github.repository_owner }}" \
            -var="github_repo=${{ github.event.repository.name }}"
