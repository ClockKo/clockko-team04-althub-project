"""Fix Timelog model table name and primary key

Revision ID: 18127996f7c1
Revises: 775be2096a27
Create Date: 2025-10-01 11:44:04.284639

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "18127996f7c1"
down_revision: Union[str, Sequence[str], None] = "775be2096a27"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("idx_task_user_id"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_id"), table_name="tasks")
    op.drop_table("tasks")
    op.drop_table("time_sessions")
    op.drop_index(op.f("ix_user_settings_id"), table_name="user_settings")
    op.drop_table("user_settings")
    op.add_column("time_logs", sa.Column("type", sa.String(), nullable=True))
    op.add_column("time_logs", sa.Column("date", sa.DateTime(), nullable=True))
    op.alter_column(
        "time_logs", "start_time", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.drop_index(op.f("idx_timelog_user_id_task_id"), table_name="time_logs")
    op.drop_index(op.f("ix_time_logs_id"), table_name="time_logs")
    op.drop_constraint(op.f("time_logs_user_id_fkey"), "time_logs", type_="foreignkey")
    op.drop_constraint(op.f("time_logs_task_id_fkey"), "time_logs", type_="foreignkey")
    op.create_foreign_key(None, "time_logs", "users", ["user_id"], ["id"])
    op.drop_column("time_logs", "task_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "time_logs",
        sa.Column("task_id", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "time_logs", type_="foreignkey")
    op.create_foreign_key(
        op.f("time_logs_task_id_fkey"),
        "time_logs",
        "tasks",
        ["task_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("time_logs_user_id_fkey"),
        "time_logs",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index(op.f("ix_time_logs_id"), "time_logs", ["id"], unique=False)
    op.create_index(
        op.f("idx_timelog_user_id_task_id"),
        "time_logs",
        ["user_id", "task_id"],
        unique=False,
    )
    op.alter_column(
        "time_logs", "start_time", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.drop_column("time_logs", "date")
    op.drop_column("time_logs", "type")
    op.create_table(
        "user_settings",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "work_start_time", postgresql.TIME(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "work_end_time", postgresql.TIME(), autoincrement=False, nullable=True
        ),
        sa.Column("max_daily_hours", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "wellness_check_interval", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "break_reminder_interval", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "max_continuous_work", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "break_reminders_enabled", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "overwork_notifications_enabled",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "wellness_check_enabled", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "email_notifications_enabled",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "push_notifications_enabled",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "daily_shutdown_time", postgresql.TIME(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "shutdown_reminders_enabled",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "shutdown_reflection_required",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("timezone", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("date_format", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("time_format", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "profile_visibility", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("share_work_stats", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "share_wellness_data", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "pomodoro_work_duration", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "pomodoro_break_duration", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "pomodoro_long_break_duration",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("wellness_goals", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("work_preferences", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("user_settings_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("user_settings_pkey")),
        sa.UniqueConstraint(
            "user_id",
            name=op.f("user_settings_user_id_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f("ix_user_settings_id"), "user_settings", ["id"], unique=False)
    op.create_table(
        "time_sessions",
        sa.Column("session_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "start_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "end_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("time_sessions_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("session_id", name=op.f("time_sessions_pkey")),
    )
    op.create_table(
        "tasks",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("reminder_enabled", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "reminder_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("tasks_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("tasks_pkey")),
    )
    op.create_index(op.f("ix_tasks_id"), "tasks", ["id"], unique=False)
    op.create_index(op.f("idx_task_user_id"), "tasks", ["user_id"], unique=False)
    # ### end Alembic commands ###
