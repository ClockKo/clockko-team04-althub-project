"""initial_migration_fresh_start

Revision ID: 5316b26f30f9
Revises: 
Create Date: 2025-10-09 18:41:23.361187

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5316b26f30f9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('room_messages', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    # Use IF EXISTS/IF NOT EXISTS for idempotency across environments
    op.execute("DROP INDEX IF EXISTS idx_room_messages_room_id_created_at")
    op.execute("DROP INDEX IF EXISTS ix_room_messages_created_at")
    op.execute("CREATE INDEX IF NOT EXISTS idx_room_message_room_id ON room_messages (room_id)")
    op.execute("CREATE INDEX IF NOT EXISTS idx_room_message_user_id ON room_messages (user_id)")
    op.drop_constraint(op.f('room_messages_user_id_fkey'), 'room_messages', type_='foreignkey')
    op.create_foreign_key(None, 'room_messages', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('room_participants', 'is_muted',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('room_participants', 'is_speaking',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.execute("DROP INDEX IF EXISTS idx_room_participants_room_id")
    op.execute("DROP INDEX IF EXISTS idx_room_participants_user_id")
    # Drop constraint only if it exists (idempotent)
    op.execute("""
    DO $$
    BEGIN
        IF EXISTS (
            SELECT 1 FROM information_schema.table_constraints
            WHERE constraint_name = 'uq_room_participant_user'
              AND table_name = 'room_participants'
        ) THEN
            ALTER TABLE room_participants DROP CONSTRAINT uq_room_participant_user;
        END IF;
    END$$;
    """)
    op.execute("CREATE INDEX IF NOT EXISTS idx_room_participant_room_id ON room_participants (room_id)")
    op.execute("CREATE INDEX IF NOT EXISTS idx_room_participant_user_id ON room_participants (user_id)")
    op.execute("CREATE INDEX IF NOT EXISTS idx_task_completed ON tasks (completed)")
    op.execute("CREATE INDEX IF NOT EXISTS idx_task_due_date ON tasks (due_date)")
    op.execute("CREATE INDEX IF NOT EXISTS idx_task_priority ON tasks (priority)")
    op.alter_column('user_settings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('user_settings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.String(),
               existing_nullable=True)
    # Drop constraint only if it exists (idempotent)
    op.execute("""
    DO $$
    BEGIN
        IF EXISTS (
            SELECT 1 FROM information_schema.table_constraints
            WHERE constraint_name = 'user_settings_user_id_key'
              AND table_name = 'user_settings'
        ) THEN
            ALTER TABLE user_settings DROP CONSTRAINT user_settings_user_id_key;
        END IF;
    END$$;
    """)
    op.execute("CREATE UNIQUE INDEX IF NOT EXISTS ix_user_settings_user_id ON user_settings (user_id)")
    op.drop_constraint(op.f('user_settings_user_id_fkey'), 'user_settings', type_='foreignkey')
    op.create_foreign_key(None, 'user_settings', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user_settings', type_='foreignkey')
    op.create_foreign_key(op.f('user_settings_user_id_fkey'), 'user_settings', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_user_settings_user_id'), table_name='user_settings')
    op.create_unique_constraint(op.f('user_settings_user_id_key'), 'user_settings', ['user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_settings', 'updated_at',
               existing_type=sa.String(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('user_settings', 'created_at',
               existing_type=sa.String(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_index('idx_task_priority', table_name='tasks')
    op.drop_index('idx_task_due_date', table_name='tasks')
    op.drop_index('idx_task_completed', table_name='tasks')
    op.drop_index('idx_room_participant_user_id', table_name='room_participants')
    op.drop_index('idx_room_participant_room_id', table_name='room_participants')
    op.create_unique_constraint(op.f('uq_room_participant_user'), 'room_participants', ['room_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_room_participants_user_id'), 'room_participants', ['user_id'], unique=False)
    op.create_index(op.f('idx_room_participants_room_id'), 'room_participants', ['room_id'], unique=False)
    op.alter_column('room_participants', 'is_speaking',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('room_participants', 'is_muted',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_constraint(None, 'room_messages', type_='foreignkey')
    op.create_foreign_key(op.f('room_messages_user_id_fkey'), 'room_messages', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.drop_index('idx_room_message_user_id', table_name='room_messages')
    op.drop_index('idx_room_message_room_id', table_name='room_messages')
    op.create_index(op.f('ix_room_messages_created_at'), 'room_messages', ['created_at'], unique=False)
    op.create_index(op.f('idx_room_messages_room_id_created_at'), 'room_messages', ['room_id', 'created_at'], unique=False)
    op.alter_column('room_messages', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    # ### end Alembic commands ###