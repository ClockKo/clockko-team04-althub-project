"""add_2fa_fields_to_users_table

Revision ID: 5f0efc346e29
Revises: 5c89bd4a9c30
Create Date: 2025-10-07 18:25:02.850138

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "5f0efc346e29"
down_revision: Union[str, Sequence[str], None] = "5c89bd4a9c30"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("idx_timelog_user_id_task_id"), table_name="time_logs")
    op.drop_index(op.f("ix_time_logs_id"), table_name="time_logs")
    op.drop_table("time_logs")
    op.add_column("tasks", sa.Column("start_date", sa.DateTime(), nullable=True))
    op.add_column("tasks", sa.Column("due_date", sa.DateTime(), nullable=True))
    op.add_column("tasks", sa.Column("completed", sa.Boolean(), nullable=False))
    op.add_column("tasks", sa.Column("priority", sa.String(length=20), nullable=False))
    op.add_column("tasks", sa.Column("tags", sa.JSON(), nullable=True))
    op.create_index("idx_task_completed", "tasks", ["completed"], unique=False)
    op.create_index("idx_task_due_date", "tasks", ["due_date"], unique=False)
    op.create_index("idx_task_priority", "tasks", ["priority"], unique=False)
    op.add_column(
        "time_sessions", sa.Column("planned_duration", sa.Integer(), nullable=True)
    )
    op.add_column("time_sessions", sa.Column("status", sa.String(), nullable=True))
    op.add_column("time_sessions", sa.Column("paused_at", sa.DateTime(), nullable=True))
    op.add_column(
        "time_sessions", sa.Column("remaining_time", sa.Integer(), nullable=True)
    )
    op.alter_column(
        "user_settings",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_settings",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.drop_constraint(
        op.f("user_settings_user_id_key"), "user_settings", type_="unique"
    )
    op.create_index(
        op.f("ix_user_settings_user_id"), "user_settings", ["user_id"], unique=True
    )
    op.drop_constraint(
        op.f("user_settings_user_id_fkey"), "user_settings", type_="foreignkey"
    )
    op.create_foreign_key(None, "user_settings", "users", ["user_id"], ["id"])
    op.add_column("users", sa.Column("avatar_url", sa.String(), nullable=True))
    op.add_column(
        "users", sa.Column("onboarding_completed", sa.Boolean(), nullable=False, server_default=sa.text('false'))
    )
    op.add_column(
        "users", sa.Column("two_factor_enabled", sa.Boolean(), nullable=False, server_default=sa.text('false'))
    )
    op.add_column("users", sa.Column("two_factor_secret", sa.String(), nullable=True))
    op.add_column("users", sa.Column("backup_codes", sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "backup_codes")
    op.drop_column("users", "two_factor_secret")
    op.drop_column("users", "two_factor_enabled")
    op.drop_column("users", "onboarding_completed")
    op.drop_column("users", "avatar_url")
    op.drop_constraint(None, "user_settings", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_settings_user_id_fkey"),
        "user_settings",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_user_settings_user_id"), table_name="user_settings")
    op.create_unique_constraint(
        op.f("user_settings_user_id_key"),
        "user_settings",
        ["user_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "user_settings",
        "updated_at",
        existing_type=sa.String(),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_settings",
        "created_at",
        existing_type=sa.String(),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.drop_column("time_sessions", "remaining_time")
    op.drop_column("time_sessions", "paused_at")
    op.drop_column("time_sessions", "status")
    op.drop_column("time_sessions", "planned_duration")
    op.drop_index("idx_task_priority", table_name="tasks")
    op.drop_index("idx_task_due_date", table_name="tasks")
    op.drop_index("idx_task_completed", table_name="tasks")
    op.drop_column("tasks", "tags")
    op.drop_column("tasks", "priority")
    op.drop_column("tasks", "completed")
    op.drop_column("tasks", "due_date")
    op.drop_column("tasks", "start_date")
    op.create_table(
        "time_logs",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("task_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "start_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "end_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
            name=op.f("time_logs_task_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("time_logs_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("time_logs_pkey")),
    )
    op.create_index(op.f("ix_time_logs_id"), "time_logs", ["id"], unique=False)
    op.create_index(
        op.f("idx_timelog_user_id_task_id"),
        "time_logs",
        ["user_id", "task_id"],
        unique=False,
    )
    # ### end Alembic commands ###
