"""fix duplicate timelog model

Revision ID: a71787d9e8cd
Revises: 18127996f7c1
Create Date: 2025-10-01 12:02:46.953759

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "a71787d9e8cd"
down_revision: Union[str, Sequence[str], None] = "18127996f7c1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TABLE IF EXISTS tasks CASCADE")
    op.execute("DROP TABLE IF EXISTS time_sessions CASCADE")
    # Drop time_logs.task_id if it exists
    try:
        from sqlalchemy import inspect
        bind = op.get_bind()
        inspector = inspect(bind)
        cols = {c["name"] for c in inspector.get_columns("time_logs")}
        if "task_id" in cols:
            op.drop_column("time_logs", "task_id")
    except Exception:
        # If inspection fails due to table absence, ignore
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "time_logs",
        sa.Column("task_id", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.create_table(
        "time_sessions",
        sa.Column("session_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "start_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "end_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("time_sessions_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("session_id", name=op.f("time_sessions_pkey")),
    )
    op.create_table(
        "tasks",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("reminder_enabled", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "reminder_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("tasks_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("tasks_pkey")),
    )
    # ### end Alembic commands ###
